协作规范：
1. 项目最少应该有 2 个分支，分别是 master 和 develop ，master 是发布分支，当需要发布新版本时，
应该使用 master 来发布；develop 分支是开发分支，它代表项目最新的开发进度，开发人员如果需要开发新功能，
需要在 develop 分支上新建一个 feature 分支，例如需要开发登录功能，那么可以在 develop 分支上新建一个
feature-login 分支，当登录功能完成后，合并回 develop ；当线上出现 bug 时，应该在 master 分支新建一个
hotfix-bug01(hotfix 作为前缀) 分支，在这个分支上解决问题后，合并回 master 、 develop 和正在工作的分支；
当 develop 分支内部测试出现问题时，直接在 develop 分支新建一个 issue-01(issue 作为前缀) 分支，解决问题后，
合并回除 master 主分支之外的分支。

2. git 提交信息以“内容：增加登录功能”类似这样的格式进行提交，统一以“内容：”作为前缀，并且尽量保证每一次提交
都只有一个提交信息，即不要改了很多东西后再来提交，因为这会产生 2 个问题，第一个就是在 AS 的 VersionControl
界面查看提交历史不够直观，第二个，当其中一个功能被撤，将会导致同步提交的其他无关代码被撤销。

3. 在每次像远程仓库提交代码时，首先拉取一下远程最新代码，避免在 AS Terminal 命令行输入“git pull origin develop"
这种命令，正确做法是点击 AS 右上方的蓝色箭头(或者使用快捷键 Ctrl + T)。

4. 协作开发不可避免的会产生代码冲突，原因是不同开发人员改动的相同的代码，git 无法正常合并，出现这种情况的话沟通解决即可。

5. 代码提交前，自己需要先测试一下，没问题了再提交。